/**
 * Find the largest number (without leading zeros) that could be generated by
 * swapping only two digits of given integer at most once (so, only one swap
 * is allowed). If the given number already the largest number, you do not
 * make any swap. 
 * Examples: 
 * Input: 2736 
 * Output : 7236 
 * 
 * Input: 841882 
 * Output : 881842 
 * 
 * Input: - 65480223 
 * Output : - 25480263 
 * 
 * Input : 852 
 * Output : 852 
 */
package largestnumber;

import java.util.Scanner;

public class LargestNumber {
    
    int query;
    String mDigit;
    String queryStr;
    boolean isPositive;
    String sign;

    public static void main(String[] args) {
        LargestNumber ln = new LargestNumber(input("Enter a number: "));
        System.out.printf("%s%n%d%n", ln.toString(), ln.solve());
        
        
    }

    public LargestNumber(int query) {
        this.query = query;
        this.isPositive = (this.query > 0);
        this.queryStr = String.valueOf(Math.abs(query));
        this.mDigit = this.findMDigit();
        this.sign = this.isPositive ? "" : "-";
    }
    
    private static int input(String message) {
        Scanner sc = new Scanner(System.in);
        int number = 0;
        while (number == 0) {
            System.out.print(message);
            try {
                String nextLine = sc.nextLine();
                number = Integer.parseInt(nextLine);
            } catch (NumberFormatException ex) {
                System.err.println(ex.getMessage() +
                        " You have to enter a positive whole number!");
            }
        }
        return number;
    }

    private String findMDigit() {
        int result = this.isPositive ? 0 : 9;
        for (int i = 0; i < this.queryStr.length(); i++) {
            int ch = this.queryStr.charAt(i) - Integer.valueOf('0');
            if (this.isPositive && ch > result) {
                result = ch;
            } else if (!this.isPositive && ch < result) {
                result = ch;
            }
        }
        return String.valueOf(result);
    }
    
    public int solve(String str) {
        int index = str.substring(1).indexOf(mDigit) + 1;
        if (index == 0) {
            return Integer.valueOf(str);
        } else {
//            if (str.charAt(0) != str.charAt(index)) {
//                return Integer.valueOf(str.charAt(index) +
//                        str.substring(1, index) + str.charAt(0) + 
//                        (index < str.length() - 1 
//                                ? str.substring(index + 1) : ""));
//            } else {
                return Integer.valueOf(sign + str.substring(0, 1) +
                        this.solve(str.substring(1)));
            //}
        }
        //return -1;
    }
    
    public int solve() {
        return solve(this.queryStr);
    }

    @Override
    public String toString() {
        return "LargestNumber{" + "query=" + query + ", mDigit=" + mDigit + ", queryStr=" + queryStr + ", positive=" + isPositive + '}';
    }

    
}